<?php
/*
 * PagarmeCoreApiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace PagarmeCoreApiLib\Tests;

use PagarmeCoreApiLib\APIException;
use PagarmeCoreApiLib\Exceptions;
use PagarmeCoreApiLib\APIHelper;
use PagarmeCoreApiLib\Models;
use PagarmeCoreApiLib\Utils\DateTimeHelper;

class SubscriptionsControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \PagarmeCoreApiLib\Controllers\SubscriptionsController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \PagarmeCoreApiLib\PagarmeCoreApiClient();
        self::$controller = $client->getSubscriptions();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * Gets all subscriptions
     */
    public function testTestGetSubscriptions()
    {
        // Parameters for the API call
        $page = null;
        $size = null;
        $code = null;
        $billingType = null;
        $customerId = null;
        $planId = null;
        $cardId = null;
        $status = null;
        $nextBillingSince = null;
        $nextBillingUntil = null;
        $createdSince = null;
        $createdUntil = null;

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getSubscriptions($page, $size, $code, $billingType, $customerId, $planId, $cardId, $status, $nextBillingSince, $nextBillingUntil, $createdSince, $createdUntil);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );
    }
}
